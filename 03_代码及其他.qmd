# 代码 & 脚本 & 项目

<a name="header"></a>

## 有什么区别吗
大家可能会有疑问，为什么一本R语言教程，怎么现在还没开始讲R语言呢？

因为主要是面向非程序员的，所以在正式学习R语言之前，我们需要先了解一些基本的概念，比如代码、脚本和项目。

这些概念在编程中非常重要，同时也是我们学习R语言的基础。


## 代码（Code）

代码语句是编程语言的基本构成单位，可以用于实现特定功能或解决特定问题。

* **特点**：
    + 可以是单个语句或一组语句。
    + 通常较为简单，解决特定的小问题。
    + 时常需要复用，可以将其封装为函数。
```{r}
# 单个简单的代码语句
# 计算平均值
v <- 1:100 # 创建向量1到100
mean(v) # 计算平均值
```

```{r}
# 一组复杂的代码语句
# 输出进度
v <- 1:101 # 创建向量1到100
n <- length(v) # 计算向量长度
for (i in seq(len = n)) {
    # 每执行20次，输出当前的进度
    vi <- v[i]
    if (i %% 20 == 0) {
        # 输出保留两位小数的百分比
        cat(sprintf("%0.2f%%\n", i / n * 100))
    }
}
```

:::{.callout-tip}
怎么写出**更好**的代码
:::

1. **明确目的**：确保代码片段有一个明确和容易理解的任务。
  
2. **变量命名**：使用有意义和描述性强的变量名。

3. **注释**：添加必要的注释来解释代码的功能或某个复杂的操作。

4. **简洁性**：避免不必要的复杂性，代码应该尽可能简洁。

5. **向量化**：尽量使用R语言提供的原生函数。

6. **可读性**：保持代码的可读性，适当地使用空格和缩进。

遵循这些准则可以提高代码片段的质量，使其更易于理解和维护。

## 脚本文件（Script）

脚本是一组预编写的代码，用于自动执行一系列任务。

- **特点**：
  - 通常用于数据处理、文件操作等。
  - 可以由多个函数和代码块组成。
  - 通常是单个文件，如 `.R`^[.R或者.r文件，两者都是R语言源文件后缀名。使用的时候并没有严格区分。实际上，任何后缀名的文本文件都可以。。。] 文件。

* 下面的示例是读取日本人口变化数据^[日本政府統計の総合窓口<https://www.e-stat.go.jp/>，数据更新很及时，感兴趣可以自己研究研究。]，抽取其中年度人口总数的数据，并绘制折线图。

:::{.callout-note}
完整文件参见`src/03/plot_population.r`。
:::

```{r}
library(knitr) # 加载knitr包

# 读取数据
fn <- "data/03/年齢（５歳階級），男女別人口－全国（大正９年～平成27年）.csv"
d <- read.csv(fn, fileEncoding = "cp932") # 读取日文、中文等非英文字符可能需要指定编码
```

```{r}
# 查看数据特征
str(d)
```

```{r}
# 查看前几行数据
knitr::kable(head(d))
```

```{r}
# 获取年度及人口总数
dd <- d[d$年齢5歳階級 == "総数", c("西暦.年.", "人口.総数.")]
```

```{r}
# 绘制折线图
# 设置字体 注意⚠️：这里使用的是日文的字体，不同操作系统可能还有区别，需要自行调整
par(family = "HiraKakuProN-W3") 
plot(dd$西暦.年., dd$人口.総数.,
    type = "l",
    col = "blue",
    xlab = "年", ylab = "人口総数",
    main = "年推移日本人口総数の変化"
)

# 添加人口变化值
par(new = TRUE)
plot(dd$西暦.年., c(NA, diff(dd$人口.総数.)), 
    type = "l", col = "red",
    xlab = "", ylab = "", axes = FALSE
)
axis(4) # 添加右侧的y轴
mtext("人口総数の変化値", side = 4, line = -1.5) # 添加右侧y轴的标签

# 添加图例
legend("bottom",
    lty = 1,
    legend = c("人口総数", "人口総数の変化値"), 
    col = c("blue", "red")
)
```

:::{.callout-tip}
为了提高代码的可读性、可维护性和可重用性，
下面是一些在`.R`文件里组织好代码的最佳实践。
:::

(@) 添加注释和文档

(@) 使用合适的命名约定

- 使用有意义的变量名和函数名。
- 遵循一致的命名约定，例如使用下划线分隔符（`open_dir`）。

(@) 分段和分节

- 使用空行和注释来分隔代码的不同部分或功能区块。

(@) 将代码分解为函数和代码块

- 将重复或可重用的代码段封装成函数。
- 如果可能，将相关的函数和代码块放在一起。

(@) 按逻辑顺序组织代码

- 通常，数据导入和清洗应该在文件的顶部，而分析和可视化应该在后面。

(@) 避免硬编码

- 使用变量而不是硬编码的数值。

(@) 使用版本控制

- 使用版本控制系统（如Git）来跟踪代码的变更。

(@) 代码测试和检查
- 在`if (FALSE) { }`代码块里测试代码。

在后面的章节里，我们会不断践行这些最佳实践。

## 项目（Project）

项目是一个更大的代码集合，通常包括多个脚本、数据文件、文档等。

- **特点**：
  - 有明确的目标和范围。
  - 通常包括版本控制、文档说明等。
  - 可以包含多个子模块和依赖。

:::{.callout-important}
项目怎么组织好代码
:::

1. **目录结构**：有组织的文件和文件夹结构。
    - `/lib`：      常用代码库
    - `/src`：      源代码
    - `/def`：      配置文件(函数需要复杂配置时使用)
    - `/etc`：      其他文件
    - `/data`：     数据源文件(csv等)
    - `/rdata`：    输出的数据文件(RData等)
    - `/out`：      输出的图片、报告等
    - `/doc`：     文档(非程序生成的文档)
    - `/test`：    测试代码
2. **版本控制**：使用 Git 进行版本控制。
3. **README**：添加 README 文件，解释项目的目的、安装、使用等。

通过以上的组织和实践，你可以更有效地管理 R 语言的代码、脚本和项目。

[⇧](#header)