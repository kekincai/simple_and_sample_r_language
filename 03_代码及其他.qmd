# 代码 & 脚本 & 项目

<a name="header"></a>

## 有什么区别吗
大家可能会有疑问，为什么一本R语言教程，怎么现在还没开始讲R语言呢？
因为主要是面向非程序员的，所以在正式学习R语言之前，我们需要先了解一些基本的概念，比如代码、脚本和项目。
这些概念在编程中非常重要，同时也是我们学习R语言的基础。


## 代码（Code）

代码语句是编程语言的基本构成单位，可以用于实现特定功能或解决特定问题。

* **特点**：
    + 可以是单个语句或一组语句。
    + 通常较为简单，解决特定的小问题。
    + 时常需要复用，可以将其封装为函数。
```{r}
# 单个简单的代码语句
# 计算平均值
v <- 1:100 # 创建向量1到100
mean(v) # 计算平均值
```

```{r}
# 一组复杂的代码语句
# 输出进度
v <- 1:101 # 创建向量1到100
n <- length(v) # 计算向量长度
for (i in seq(len = n)) {
    # 每执行20次，输出当前的进度
    vi <- v[i]
    if (i %% 20 == 0) {
        # 输出保留两位小数的百分比
        cat(sprintf("%0.2f%%\n", i / n * 100))
    }
}
```

:::{.callout-tip}
怎么写出**更好**的代码
:::

1. **明确目的**：确保代码片段有一个明确和容易理解的任务。
  
2. **变量命名**：使用有意义和描述性强的变量名。

3. **注释**：添加必要的注释来解释代码的功能或某个复杂的操作。

4. **简洁性**：避免不必要的复杂性，代码应该尽可能简洁。

5. **向量化**：尽量使用R语言提供的原生函数。

6. **可读性**：保持代码的可读性，适当地使用空格和缩进。

遵循这些准则可以提高代码片段的质量，使其更易于理解和维护。

## 脚本（Script）

脚本是一组预编写的代码，用于自动执行一系列任务。

- **特点**：
  - 通常用于数据处理、文件操作等。
  - 可以由多个函数和代码块组成。
  - 通常是单个文件，如 `.R` 文件。

- **脚本.r文件怎么组织好代码**

  1. **注释和文档**：文件开头添加脚本的目的和用法。
  2. **导入库**：将所有需要的库放在文件开头。
  3. **全局变量**：定义所有全局变量。
  4. **函数定义**：定义所有函数。
  5. **主代码块**：使用 `if(main)` 或直接在脚本底部添加主代码块。

```r
# 脚本说明
library(dplyr)

# 全局变量
total <- 0

# 函数定义
add <- function(a, b) {
  return(a + b)
}

# 主代码块
total <- add(5, 10)
print(total)
```

## 项目（Project）

项目是一个更大的代码集合，通常包括多个脚本、数据文件、文档等。

- **特点**：
  - 有明确的目标和范围。
  - 通常包括版本控制、文档说明等。
  - 可以包含多个子模块和依赖。

:::{.callout-important}
项目怎么组织好代码
:::

1. **目录结构**：有组织的文件和文件夹结构。
    - `/lib`：      常用代码库
    - `/src`：      源代码
    - `/data`：     数据源文件(csv等)
    - `/rdata`：    输出的数据文件(RData等)
    - `/out`：      输出的图片、报告等
    - `/docs`：     文档(非程序生成的文档)
    - `/tests`：    测试代码
2. **版本控制**：使用 Git 进行版本控制。
3. **README**：添加 README 文件，解释项目的目的、安装、使用等。

通过以上的组织和实践，你可以更有效地管理 R 语言的代码、脚本和项目。

[⇧](#header)