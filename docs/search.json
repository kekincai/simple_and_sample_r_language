[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R语言入门",
    "section": "",
    "text": "前言\n这是一本关于R语言入门的小册子。\n当前版本：0.1\n问题反馈：kekincai@gmail.com"
  },
  {
    "objectID": "index.html#目录",
    "href": "index.html#目录",
    "title": "R语言入门",
    "section": "目录",
    "text": "目录\n\nR语言入门\n如何解题\n代码 & 脚本 & 项目 & 编程建议\n向量及其运算\nMatrix & Dataframe & List\n函数 & 程序流程控制\n数据导入 &导出\n数据可视化\n代码优化 & 并行"
  },
  {
    "objectID": "index.html#写作目的",
    "href": "index.html#写作目的",
    "title": "R语言入门",
    "section": "写作目的",
    "text": "写作目的\nR语言是一门非常实用且易于扩展的脚本语言。在数据分析中得到了广泛的应用。 这本小册子我想把工作中受到的严格训练总结出来分享给大家。\n本书基本上是介绍base R的用法，在可重复性研究上，使用基础的R语法会让后来人很方便的复现当时的结果。"
  },
  {
    "objectID": "index.html#本书代码执行环境",
    "href": "index.html#本书代码执行环境",
    "title": "R语言入门",
    "section": "本书代码执行环境",
    "text": "本书代码执行环境\n\n\n    machine  : arm64\n    platform : aarch64-apple-darwin20\n    version  : R version 4.3.1 (2023-06-16)\n               Beagle Scouts\n\n\n⇧"
  },
  {
    "objectID": "01_R语言入门.html#r语言历史",
    "href": "01_R语言入门.html#r语言历史",
    "title": "1  R语言入门",
    "section": "1.1 R语言历史",
    "text": "1.1 R语言历史\nR语言的起源可以追溯到1976年，当时它是由新西兰的Ross Ihaka和Robert Gentleman在奥克兰大学开发的。它是S语言的一个实现，S语言是由贝尔实验室的John Chambers和同事们在1976年开发的。在R语言的源代码中还有很多S语言的留存代码，后面我们会时不时深入了解一下R语言的具体实现。\n\n\n\n\n\n\nNote\n\n\n\n不用担心，我们不必去学习其中的C语言和Fortran代码。\n\n\nR语言的名字来源于其创始人的名字首字母。\nR语言的开发是为了提供一个免费、开源的统计计算环境，它不仅仅是一个编程语言，还包括了一个高效的数据存储和处理工具，以及一套广泛的统计和图形功能。"
  },
  {
    "objectID": "01_R语言入门.html#谁在使用r语言",
    "href": "01_R语言入门.html#谁在使用r语言",
    "title": "1  R语言入门",
    "section": "1.3 谁在使用R语言",
    "text": "1.3 谁在使用R语言\nR语言在学术界和工业界都得到了广泛的应用。许多研究者使用R进行统计分析和数据可视化。在工业界，尤其是在金融、生物技术、市场研究和社交媒体领域，R语言也得到了广泛的应用。\n\n\n\n\n\n\nNote\n\n\n\n国内同学，尤其是学习生物、医学的同学可能有更深的体会。\n\n\n得益于它的易扩展性，大公司如Google, Facebook, Airbnb和New York Times都在使用R语言进行数据分析。此外，R语言的社区也非常活跃，有数千个扩展包，涵盖了从生态学到金融的各种领域。"
  },
  {
    "objectID": "01_R语言入门.html#为什么不用r语言",
    "href": "01_R语言入门.html#为什么不用r语言",
    "title": "1  R语言入门",
    "section": "1.3 为什么不用R语言",
    "text": "1.3 为什么不用R语言\n尽管R语言有很多优点，但它并不适合所有的应用场景。例如，对于大型的、实时的数据处理和分析，R可能不是最佳选择。此外，R语言主要是为统计计算和数据分析设计的，对于其他类型的应用，如网站开发或移动应用开发，R语言可能不是最佳选择。\n另外，R语言的学习曲线对于初学者来说可能有些陡峭，尤其是对于那些没有编程背景的人。"
  },
  {
    "objectID": "03_代码及其他.html#如何学好一门编程语言",
    "href": "03_代码及其他.html#如何学好一门编程语言",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.1 如何学好一门编程语言",
    "text": "3.1 如何学好一门编程语言\n学习编程语言不仅仅是学习语法和函数。更重要的是学习如何解决问题和如何有效地使用这门语言来实现你的目标。以下是一些建议：\n\n实践：编程是一种技能，需要通过实践来不断地提高。尝试做一些小项目，或者参与一些开源项目。\n理解基础：确保你理解了编程语言的基础概念，如变量、函数和控制结构。\n参与社区：加入相关的论坛和社区，与其他开发者交流，学习他们的经验和技巧。\n持续学习：技术是不断发展的，确保你始终保持与时俱进。\n\n最后，记住，学习编程是一个持续的旅程，不是一个目的地。享受这个过程，你会发现它是非常有趣和有益的。"
  },
  {
    "objectID": "01_R语言入门.html#为什么需要编程",
    "href": "01_R语言入门.html#为什么需要编程",
    "title": "1  R语言入门",
    "section": "1.3 为什么需要编程",
    "text": "1.3 为什么需要编程"
  },
  {
    "objectID": "01_R语言入门.html#如何解题",
    "href": "01_R语言入门.html#如何解题",
    "title": "1  R语言入门",
    "section": "1.5 如何解题",
    "text": "1.5 如何解题\n所以，学习一门编程语言并不是我们最终的目的，我们最后还是要去解决面临的实际问题。 所以在正式入门R语言之前，下一章将先为大家介绍数学家波利亚的书《如何解题》。\n⇧"
  },
  {
    "objectID": "02_如何解题.html#原文如下",
    "href": "02_如何解题.html#原文如下",
    "title": "2  如何解题",
    "section": "2.1 原文如下",
    "text": "2.1 原文如下\n\nUNDERSTANDING THE PROBLEM\n\nFirst. You have to understand the problem.\nWhat is the unknown? What are the data? What is the condition?\nIs it possible to satisfy the condition? Is the condition sufficient to determine the unknown? Or is it insufficient? Or redundant? Or contradictory? Draw a figure. Introduce suitable notation.\nSeparate the various parts of the condition. Can you write them down?\n\nDEVISING A PLAN\n\nSecond. Find the connection between the data and the unknown. You may be obliged to consider auxiliary problems if an immediate connection cannot be found. You should obtain eventually a plan of the solution.\nHave you seen it before? Or have you seen the same problem in a slightly different form? Do you know a related problem? Do you know a theorem that could be useful? Look at the unknown! And try to think of a familiar problem having the same or a similar unknown. Here is a problem related to yours and solved before. Could you use it? Could you use its result? Could you use its method? Should you introduce some auxiliary element in order to make its use possible?\nCould you restate the problem? Could you restate it still differently? Go back to definitions. If you cannot solve the proposed problem try to solve first some related problem. Could you imagine a more accessible related problem? A more general problem? A more special problem? An analogous problem? Could you solve a part of the problem? Keep only a part of the condition, drop the other part; how far is the unknown then determined, how can it vary? Could you derive something useful from the data? Could you think of other data appropriate to determine the unknown? Could you change the unknown or data, or both if necessary, so that the new unknown and the new data are nearer to each other?\nDid you use all the data? Did you use the whole condition? Have you taken into account all essential notions involved in the problem?\n\nCARRYING OUT THE PLAN\n\nThird. Carry out your plan.\nCarrying out your plan of the solution, check each step. Can you see clearly that the step is correct? Can you prove that it is correct?\n\nLooking Back\n\nFourth. Examine the solution obtained.\n\nCan you check the result? Can you check the argument?\nCan you derive the solution differently? Can you see it at a glance?\nCan you use the result, or the method, for some other problem?"
  },
  {
    "objectID": "01_R语言入门.html#r语言解决了哪些问题",
    "href": "01_R语言入门.html#r语言解决了哪些问题",
    "title": "1  R语言入门",
    "section": "1.3 R语言解决了哪些问题",
    "text": "1.3 R语言解决了哪些问题\n我想最重要的是它为统计分析提供了一整套工具，而且是免费。它的扩展包也非常丰富，可以满足各种各样的需求。此外，R语言还有一个很大的优势，就是它的可视化功能非常强大，可以帮助我们更好地理解数据。\n在各个领域内还有各种强大的付费分析工具，但是R语言的免费和开源使得它在学术界和工业界都得到了广泛的应用。"
  },
  {
    "objectID": "01_R语言入门.html#r语言在解决哪些问题",
    "href": "01_R语言入门.html#r语言在解决哪些问题",
    "title": "1  R语言入门",
    "section": "1.4 R语言在解决哪些问题",
    "text": "1.4 R语言在解决哪些问题\n我想最重要的是它为统计分析提供了一整套工具。 它的扩展包也非常丰富，可以满足各种各样的需求。 此外，R语言还有一个很大的优势，就是它的可视化功能非常强大，可以帮助我们更好地理解数据。\n在各个领域内还有各种强大的付费分析工具，但是R语言的免费和开源使得它在学术界和工业界都得到了广泛的应用。\n\n统计分析和数据科学\n\n\n数据清洗\n描述性统计分析\n推断性统计分析\n机器学习模型构建\n\n\n生物信息学\n\n\n基因序列分析\n蛋白质结构预测\n生物标记物发现\n\n\n金融分析\n\n\n风险评估\n股票市场分析\n信用评分\n\n\n心理学研究\n\n\n心理测量和量表开发\n实验设计和数据分析\n行为和认知模型构建\n社会心理学研究（如群体动力、偏见等）\n\n\n市场研究\n\n\n消费者行为分析\n市场趋势预测\n产品定位\n\n\n医疗研究\n\n\n临床试验分析\n疾病预测\n医疗成本分析\n\n\n社会科学研究\n\n\n人口统计学分析\n调查数据分析\n社会网络分析\n\n\n地理信息系统（GIS）\n\n\n空间数据分析\n地图生成\n地理位置预测\n\n\n自然语言处理（NLP）\n\n\n文本挖掘\n情感分析\n语义分析\n\n\n工业制造\n\n\n质量控制\n供应链优化\n生产效率分析\n\n\n能源领域\n\n\n能源消耗分析\n可再生能源研究\n能源价格预测\n\n\n\n\n\n\n\nNote\n\n\n\n颜色标记部分是我过去几年在工作中使用R语言解决的问题。\n\n\n上述这些只是R语言在各个领域的应用的冰山一角，R语言的应用还在不断扩展。 借助于扩展包，我们可以很方便利用前辈们的成果，快速地解决我们遇到的实际问题。"
  },
  {
    "objectID": "01_R语言入门.html#r语言在不同领域的应用",
    "href": "01_R语言入门.html#r语言在不同领域的应用",
    "title": "1  R语言入门",
    "section": "1.4 R语言在不同领域的应用",
    "text": "1.4 R语言在不同领域的应用\n\n统计分析和数据科学\n\n\n数据清洗\n描述性统计分析\n推断性统计分析\n机器学习模型构建\n\n\n生物信息学\n\n\n基因序列分析\n蛋白质结构预测\n生物标记物发现\n\n\n金融分析\n\n\n风险评估\n股票市场分析\n信用评分\n\n\n心理学研究\n\n\n心理测量和量表开发\n实验设计和数据分析\n行为和认知模型构建\n社会心理学研究（如群体动力、偏见等）\n\n\n市场研究\n\n\n消费者行为分析\n市场趋势预测\n产品定位\n\n\n医疗研究\n\n\n临床试验分析\n疾病预测\n医疗成本分析\n\n\n社会科学研究\n\n\n人口统计学分析\n调查数据分析\n社会网络分析\n\n\n地理信息系统（GIS）\n\n\n空间数据分析\n地图生成\n地理位置预测\n\n\n自然语言处理（NLP）\n\n\n文本挖掘\n情感分析\n语义分析\n\n\n工业制造\n\n\n质量控制\n供应链优化\n生产效率分析\n\n\n能源领域\n\n\n能源消耗分析\n可再生能源研究\n能源价格预测\n\n\n\n\n\n\n\nNote\n\n\n\n颜色标记部分是我过去几年在工作中使用R语言解决的问题。\n\n\n上述这些只是R语言在各个领域的应用的冰山一角，R语言的应用还在不断扩展。借助于扩展包，我们可以很方便利用前辈们的成果，快速地解决我们遇到的实际问题。"
  },
  {
    "objectID": "02_如何解题.html#how-to-solve-it",
    "href": "02_如何解题.html#how-to-solve-it",
    "title": "2  如何解题",
    "section": "2.1 How to Solve It",
    "text": "2.1 How to Solve It\n《How to Solve It》是由匈牙利数学家George Pólya于1945年出版的一本数学教育书籍。 这本书主要关注解决数学问题的一般方法和思考过程，而不仅仅是特定数学问题的解决方案。 Pólya通过这本书希望能够帮助读者更好地理解问题解决的基本原则，并将这些原则应用到各种不同类型的数学问题中。\n书中最著名的是Pólya提出的四步问题解决框架，即：\n\n理解问题（Understand the Problem）：确保你明白问题是什么，以及什么是已知的，什么是未知的。\n设计一个计划（Devise a Plan）：思考如何接近问题，可能会涉及到绘制图表、列出方程式或者其他解决策略。\n执行计划（Carry Out the Plan）：按照你的计划去解决问题，这可能涉及到一些数学运算或逻辑推理。\n回顾（Looking Back）：检查你的答案是否正确，以及你的解决方法是否有效。这一步也可以用于反思和改进问题解决技巧。\n\n这四步方法不仅适用于数学问题，还可以广泛应用于科学、工程、商业和日常生活中的问题解决。\n这本书被广泛用于数学教育和教师培训，也受到了多个学科领域的高度评价。它不仅对数学教育有深远的影响，还在一定程度上影响了计算机科学、工程和其他科学领域的问题解决方法。"
  },
  {
    "objectID": "02_如何解题.html#首页原文如下",
    "href": "02_如何解题.html#首页原文如下",
    "title": "2  如何解题",
    "section": "2.2 首页原文如下",
    "text": "2.2 首页原文如下\n\nUNDERSTANDING THE PROBLEM\n\nFirst. You have to understand the problem.\nWhat is the unknown? What are the data? What is the condition?\nIs it possible to satisfy the condition? Is the condition sufficient to determine the unknown? Or is it insufficient? Or redundant? Or contradictory? Draw a figure. Introduce suitable notation.\nSeparate the various parts of the condition. Can you write them down?\n\nDEVISING A PLAN\n\nSecond. Find the connection between the data and the unknown. You may be obliged to consider auxiliary problems if an immediate connection cannot be found. You should obtain eventually a plan of the solution.\nHave you seen it before? Or have you seen the same problem in a slightly different form? Do you know a related problem? Do you know a theorem that could be useful? Look at the unknown! And try to think of a familiar problem having the same or a similar unknown. Here is a problem related to yours and solved before. Could you use it? Could you use its result? Could you use its method? Should you introduce some auxiliary element in order to make its use possible?\nCould you restate the problem? Could you restate it still differently? Go back to definitions. If you cannot solve the proposed problem try to solve first some related problem. Could you imagine a more accessible related problem? A more general problem? A more special problem? An analogous problem? Could you solve a part of the problem? Keep only a part of the condition, drop the other part; how far is the unknown then determined, how can it vary? Could you derive something useful from the data? Could you think of other data appropriate to determine the unknown? Could you change the unknown or data, or both if necessary, so that the new unknown and the new data are nearer to each other?\nDid you use all the data? Did you use the whole condition? Have you taken into account all essential notions involved in the problem?\n\nCARRYING OUT THE PLAN\n\nThird. Carry out your plan.\nCarrying out your plan of the solution, check each step. Can you see clearly that the step is correct? Can you prove that it is correct?\n\nLooking Back\n\nFourth. Examine the solution obtained.\n\nCan you check the result? Can you check the argument?\nCan you derive the solution differently? Can you see it at a glance?\nCan you use the result, or the method, for some other problem?"
  },
  {
    "objectID": "02_如何解题.html#如何更好地解题",
    "href": "02_如何解题.html#如何更好地解题",
    "title": "2  如何解题",
    "section": "2.3 如何更好地解题",
    "text": "2.3 如何更好地解题\n我们平时在学习的时候都是经过简化抽象过的，解决的思路也是很明确，并不需要掌握太多的技巧。\n但是现实的问题可能很复杂，我们需要自己不断地将问题分解、细化，然后一步一步坚实地解决每一个子问题或者类似的问题。 在每一步的基础上，我们不断深入问题的本质。 最后再回到原问题，看看有没有得到解决。在此基础上，我们可以提出新的问题，或者改进解决方案。 重复这个过程，不过问题越辩越明，我们的思路也不断得到扩展，解决问题的能力也会得到提升。\n⇧"
  },
  {
    "objectID": "03_代码及其他.html#有什么区别吗",
    "href": "03_代码及其他.html#有什么区别吗",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.1 有什么区别吗",
    "text": "3.1 有什么区别吗\n大家可能会有疑问，为什么一本R语言教程，怎么现在还没开始讲R语言呢？ 因为主要是面向非程序员的，所以在正式学习R语言之前，我们需要先了解一些基本的概念，比如代码、脚本和项目。 这些概念在编程中非常重要，同时也是我们学习R语言的基础。"
  },
  {
    "objectID": "03_代码及其他.html#怎么写出好的代码",
    "href": "03_代码及其他.html#怎么写出好的代码",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.2 怎么写出好的代码",
    "text": "3.2 怎么写出好的代码\n\n可读性：使用有意义的变量名和函数名，添加注释。\n模块化：将代码分解为函数或模块，每个函数或模块只做一件事。\nDRY 原则：Don’t Repeat Yourself，避免重复代码。\n错误处理：添加适当的错误处理和异常捕获。\n测试：编写测试用例，确保代码的正确性。"
  },
  {
    "objectID": "03_代码及其他.html#脚本.r文件怎么组织好代码",
    "href": "03_代码及其他.html#脚本.r文件怎么组织好代码",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.5 脚本.r文件怎么组织好代码",
    "text": "3.5 脚本.r文件怎么组织好代码\n\n注释和文档：文件开头添加脚本的目的和用法。\n导入库：将所有需要的库放在文件开头。\n全局变量：定义所有全局变量。\n函数定义：定义所有函数。\n主代码块：使用 if(main) 或直接在脚本底部添加主代码块。\n\n# 脚本说明\nlibrary(dplyr)\n\n# 全局变量\ntotal &lt;- 0\n\n# 函数定义\nadd &lt;- function(a, b) {\n  return(a + b)\n}\n\n# 主代码块\ntotal &lt;- add(5, 10)\nprint(total)"
  },
  {
    "objectID": "03_代码及其他.html#项目怎么组织好代码",
    "href": "03_代码及其他.html#项目怎么组织好代码",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.6 项目怎么组织好代码",
    "text": "3.6 项目怎么组织好代码\n\n目录结构：有组织的文件和文件夹结构。\n\n/lib： 常用代码库\n/src： 源代码\n/data： 数据源文件(csv等)\n/rdata： 输出的数据文件(RData等)\n/out： 输出的图片、报告等\n/docs： 文档(非程序生成的文档)\n/tests： 测试代码\n\n版本控制：使用 Git 进行版本控制。\nREADME：添加 README 文件，解释项目的目的、安装、使用等。\n\n通过以上的组织和实践，你可以更有效地管理 R 语言的代码、脚本和项目。"
  },
  {
    "objectID": "index.html#谁适合阅读本书",
    "href": "index.html#谁适合阅读本书",
    "title": "R语言入门",
    "section": "谁适合阅读本书",
    "text": "谁适合阅读本书\n\n本书适合谁？\n本书主要面向以下几类读者：\n\n非计算机专业研究人员：如果你是一名专业研究人员，但没有编程背景，本书将为你提供一个简单易懂的编程入门指南。\n数据分析新手：对于刚开始接触数据分析的人，本书将教你如何使用R语言进行数据处理、分析和可视化。\n计算机专业跨行人员：如果你是一名计算机专业的人员，但没有接触过数据分析，本书将为你提供一个简单易懂的数据分析入门指南。\n\n\n\n本书不适合谁？\n\n如果你已经是R语言的高级用户，那么本书可能不会提供太多新的信息。 推荐阅读Hadley Wickham的新书 《R for Data Science》。\n如果您正在寻找高度专业化或高级的数据分析技术，本书可能不适合你。\n\n\n\n预备知识\n读者最好具备基础的数学和统计学知识，不过本书也会尽量用简单明了的方式解释所有概念。"
  },
  {
    "objectID": "01_R语言入门.html#r语言的特点",
    "href": "01_R语言入门.html#r语言的特点",
    "title": "1  R语言入门",
    "section": "1.2 R语言的特点",
    "text": "1.2 R语言的特点\nR语言是一门解释型语言，这意味着不需要进行复杂的编译过程就可以直接执行代码。 这一特点使得R语言在数据分析和统计计算中非常便利，允许用户快速地进行探索性数据分析和可视化。\n解释型的特性也使得R语言更易于学习和使用，特别是对于没有编程背景的人来说。 这种便利性使得R成为数据科学和统计分析的首选工具之一。"
  },
  {
    "objectID": "03_代码及其他.html#代码code",
    "href": "03_代码及其他.html#代码code",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.2 代码（Code）",
    "text": "3.2 代码（Code）\n代码语句是编程语言的基本构成单位，可以用于实现特定功能或解决特定问题。\n\n特点：\n\n可以是单个语句或一组语句。\n通常较为简单，解决特定的小问题。\n时常需要复用，可以将其封装为函数。\n\n\n\n# 单个简单的代码语句\n# 计算平均值\nv &lt;- 1:100 # 创建向量1到100\nmean(v) # 计算平均值\n\n[1] 50.5\n\n\n\n# 一组复杂的代码语句\n# 输出进度\nv &lt;- 1:101 # 创建向量1到100\nn &lt;- length(v) # 计算向量长度\nfor (i in seq(len = n)) {\n    # 每执行20次，输出当前的进度\n    vi &lt;- v[i]\n    if (i %% 20 == 0) {\n        # 输出保留两位小数的百分比\n        cat(sprintf(\"%0.2f%%\\n\", i / n * 100))\n    }\n}\n\n19.80%\n39.60%\n59.41%\n79.21%\n99.01%\n\n\n\n\n\n\n\n\nTip\n\n\n\n怎么写出更好的代码\n\n\n\n明确目的：确保代码片段有一个明确和容易理解的任务。\n变量命名：使用有意义和描述性强的变量名。\n注释：添加必要的注释来解释代码的功能或某个复杂的操作。\n简洁性：避免不必要的复杂性，代码应该尽可能简洁。\n向量化：尽量使用R语言提供的原生函数。\n可读性：保持代码的可读性，适当地使用空格和缩进。\n\n遵循这些准则可以提高代码片段的质量，使其更易于理解和维护。"
  },
  {
    "objectID": "03_代码及其他.html#脚本script",
    "href": "03_代码及其他.html#脚本script",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.3 脚本（Script）",
    "text": "3.3 脚本（Script）\n脚本是一组预编写的代码，用于自动执行一系列任务。\n\n特点：\n\n通常用于数据处理、文件操作等。\n可以由多个函数和代码块组成。\n通常是单个文件，如 .R 文件。\n\n脚本.r文件怎么组织好代码\n\n注释和文档：文件开头添加脚本的目的和用法。\n导入库：将所有需要的库放在文件开头。\n全局变量：定义所有全局变量。\n函数定义：定义所有函数。\n主代码块：使用 if(main) 或直接在脚本底部添加主代码块。\n\n\n# 脚本说明\nlibrary(dplyr)\n\n# 全局变量\ntotal &lt;- 0\n\n# 函数定义\nadd &lt;- function(a, b) {\n  return(a + b)\n}\n\n# 主代码块\ntotal &lt;- add(5, 10)\nprint(total)"
  },
  {
    "objectID": "03_代码及其他.html#项目project",
    "href": "03_代码及其他.html#项目project",
    "title": "3  代码 & 脚本 & 项目",
    "section": "3.4 项目（Project）",
    "text": "3.4 项目（Project）\n项目是一个更大的代码集合，通常包括多个脚本、数据文件、文档等。\n\n特点：\n\n有明确的目标和范围。\n通常包括版本控制、文档说明等。\n可以包含多个子模块和依赖。\n\n\n\n\n\n\n\n\nImportant\n\n\n\n项目怎么组织好代码\n\n\n\n目录结构：有组织的文件和文件夹结构。\n\n/lib： 常用代码库\n/src： 源代码\n/data： 数据源文件(csv等)\n/rdata： 输出的数据文件(RData等)\n/out： 输出的图片、报告等\n/docs： 文档(非程序生成的文档)\n/tests： 测试代码\n\n版本控制：使用 Git 进行版本控制。\nREADME：添加 README 文件，解释项目的目的、安装、使用等。\n\n通过以上的组织和实践，你可以更有效地管理 R 语言的代码、脚本和项目。\n⇧"
  },
  {
    "objectID": "04_向量及其运算.html",
    "href": "04_向量及其运算.html",
    "title": "4  向量 & 运算符",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "05_matrix.html",
    "href": "05_matrix.html",
    "title": "5  Matrix & Dataframe & List",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "06_函数及程序流程控制.html",
    "href": "06_函数及程序流程控制.html",
    "title": "6  函数 & 程序流程控制",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "07_数据导入导出.html",
    "href": "07_数据导入导出.html",
    "title": "7  数据导入 &导出",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "08_数据可视化.html",
    "href": "08_数据可视化.html",
    "title": "8  数据可视化",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "09_代码优化及并行.html",
    "href": "09_代码优化及并行.html",
    "title": "9  代码优化 & 并行",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "引用 & 扩展阅读",
    "section": "",
    "text": "⇧"
  },
  {
    "objectID": "version.html",
    "href": "version.html",
    "title": "写作进度",
    "section": "",
    "text": "⇧"
  }
]